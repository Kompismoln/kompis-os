NAME
    id-entities.sh - Manage (id)entities like hosts, users or domains.

SYNOPSIS
    id-entities.sh [--root|--host|--user|--domain] <entity> <action> [key]
    id-entities.sh <entity-pattern> <action> [key]
    id-entities.sh --help

DESCRIPTION
    This script manages the state and whereabouts of secrets and derived artifacts.
    It's a boilerplate for automating creation, alignment, and verification
    of keys within an infrastructure.

    All commands follow the same grammar, the first argument specifies the class
    of the entity (--user for humans, --host for machines etc.), next argument names
    an entity, the third is the action to perform and last argument names
    the key. Different procedures are assigned to different combinations of these
    commands, and the output will show which procedures were chosen.

CLASS and ENTITY
   Specify the class of entity followed by the name
   id-entities.sh -r 1
   id-entities.sh -h some-host
   id-entities.sh -u admin

   --root <entity>   Root identities used to encrypt other entities
   --host <entity>   Machines
   --user <entity>   Humans
   --domain <entity> Things that span over several hosts

ACTIONS
    The action specifies the operation to perform on the entity:

    init             Create a new age identity and encrypted backend.
    new              Create/renew all. Equivalent to new-secret + align.
    new-secret       Generate, encrypt and store a new secret.
    align            Regenerate artifacts from source of truth.
    verify           All that apply of verify-host|hash|public|identity.
    cat-secret       Write secret to stdout.
    cat-public       Write public artifact to stdout.
    sideload         Push imperative secrets to host (age-key and luks-key).
    
KEY TYPES
    Type of procedure to run on the secret, defaults to 'age-key'.

    Type:             (devnote)
    age-key           public key is entity's identity in .sops.yaml, also hosts' decryption key
    ssh-key           host's host key is source of truth on this one, not backend
    wg-key            no host verification (ping is the host verification)
    luks-key          Key for LUKS disk encryption can be sideloaded and verified via keyservice 
    tls-cert          A TLS certificate for domains that span hosts
    passwd            A user password with passwd-hashed as artifact
    mail              Passwords for nixos-simple-mailserver behave exactly like passwd

ENVIRONMENT VARIABLES
    LOG_LEVEL=[debug|info|warning|error|important|focus|off]
        Sets logging verbosity

    SEED_SECRET=<path>
        If set during a 'new', 'new-secret', 'init' or 'sideload' action, the contents of the
        file will be used as secret instead of generating a new one.

EXAMPLES
    Initialize the repository for the first time with root key #1:
        $ SEED_SECRET=<(age-keygen) ./id-entities.sh -r 1 init

    Create a new host identity for 'webserver-01'
        $ ./id-entities.sh -h webserver-01 init

    Sideload age-key to host (see modules/keyservice.nix to setup keyservice)
        $ ./id-entities.sh -h webserver-01 sideload

    Check if it's there
        $ ./id-entities.sh -h webserver-01 verify

    Scan host and retreive the public key
        $ ./id-entities.sh -h webserver-01 align ssh-key

    Check if it worked
        $ ./id-entities.sh -h webserver-01 verify ssh-key

    Create a new password for user 'jane':
        $ ./id-entities.sh -u jane new passwd

    Write the sha-512 hash to stdout:
        $ ./id-entities.sh -u jane cat-secret passwd-hashed

    Renew passwd only, without modifying the hash
        $ ./id-entities.sh -u jane new-secret passwd

    See how they don't match
        $ ./id-entities.sh -u jane verify passwd

    Sync again
        $ ./id-entities.sh -u jane align passwd

    See how they match
        $ ./id-entities.sh -u jane verify passwd
