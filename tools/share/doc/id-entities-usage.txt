NAME
    id-entities.sh - Manage secrets and cryptographic identities.

USAGE
    id-entities.sh <class-flag> <entity> <prefix> [key] [slot]
    id-entities.sh <identity-query> <prefix> [key] [slot]
    id-entities.sh --help

DESCRIPTION
    This script manages the state and whereabouts of secrets and derived artifacts.
    It is built on top of 'sops' and 'age' to provide a consistent framework for
    automating key management within an infrastructure.

    Operations are defined by a combination of the entity's class, its name,
    an action to perform (the prefix), and the type of key to act upon.

ARGUMENTS
    <class-flag> <entity>
        Specify the class of the entity and its unique name.

        -r, --root      Root identities used to encrypt other secrets.
        -h, --host      Machines or servers.
        -s, --service   Automated services (e.g., 'locksmith').
        -u, --user      Human users.
        -d, --domain    Domains for services like TLS.

    <prefix>
        The action to perform on the entity's key.

        init          Create the encrypted backend file for a new entity. The
                      entity's own age-key is created by default.

        new           Generate a new secret and immediately update its public
                      artifact. (Equivalent to 'new-secret' followed by 'align').

        new-secret    Generate and store a new secret, leaving the old artifact
                      in place (the secret and artifact will be out of sync).

        align         Update/regenerate the public artifact from the current secret.

        verify        Check if the stored artifact matches one derived from the
                      current secret. Makes no changes.

        check         Performs a live check against a remote entity via the
                      locksmith service.

        pull          Used for host ssh-keys. Scans the remote host's public key
                      and updates the local secret to match, making the remote
                      host the source of truth.

        push          Push a secret to a remote host (e.g., adding an age-key or
                      a new LUKS passphrase).

        rebuild       Re-encrypt all backend files according to the current .sops.yaml
                      rules. Used after adding or rotating a root key.

        cat-secret    Decrypt and print a raw or encoded secret to stdout.
        base64-secret
        sha512-secret
        json-secret

        unset         Remove a key (and its specific slot) from the backend.

        next-slot     Find the next available numbered slot for a multi-valued
                      key (e.g., luks-key).

    [key]
        The type of secret to manage. Defaults to 'age-key'.

        age-key         The primary age key used for sops encryption.
        ssh-key         SSH keys for users or hosts.
        wg-key          WireGuard key-pairs for hosts.
        luks-key        Passphrases for LUKS disk encryption.
        nix-cache-key   Signing keys for a Nix binary cache.
        passwd          User passwords. The artifact is a SHA512 hash.
        mail            Mailbox passwords (behaves identically to 'passwd').
        tls-cert        Key-pairs for X.509 certificates.

    [slot]
        A non-negative integer for keys that support multiple values, like 'luks-key'.
        Defaults to '0'.

ENVIRONMENT VARIABLES
    SOPS_AGE_KEY_FILE=<path>
        REQUIRED. Path to the private age key file of the identity authorized to
        perform the requested action (e.g., a root key).

    REPO_ROOT=<path>
        The location of the repo to be managed, defaults to pwd if not set.
        A .sops.yaml is expected directly under this path.

    SECRET_SEED=<path>
        If this file path is set during 'init', 'new', or 'push' operations, its
        contents will be used as the secret instead of generating a new one.

    LOG_LEVEL=[trace|debug|info|important|warning|success|error|off]
        Sets the logging verbosity for troubleshooting. Defaults to 'info'

EXAMPLES
    Bootstrap the repository with the first root key from a file:
        $ SECRET_SEED=./my-root-key.txt id-entities.sh -r 1 init

    Create a new host identity for 'webserver-01':
        $ id-entities.sh -h webserver-01 init

    Create a new LUKS key for the host, push it, and check it live:
        $ id-entities.sh -h webserver-01 new luks-key
        $ id-entities.sh -h webserver-01 push luks-key
        $ id-entities.sh -h webserver-01 check luks-key

    Update the local store with the SSH public key currently on a host:
        $ id-entities.sh -h webserver-01 pull ssh-key
        $ id-entities.sh -h webserver-01 verify ssh-key

    Create a new password for user 'jane' and then view it:
        $ id-entities.sh -u jane new passwd
        $ id-entities.sh -u jane cat-secret passwd

    Set a specific password for user 'jane' from a variable:
        $ pw="S3cur3&P4ssw0rd!"
        $ SECRET_SEED=<(echo -n "$pw") id-entities.sh -u jane new passwd

    Add a new root key ('root-2') and re-encrypt all secrets so it can access them:
        $ id-entities.sh -r 2 init
        $ id-entities.sh -r all rebuild
